// Generated by CoffeeScript 1.9.3
var base, fs, isThere, merge, nocomments, path, read, write;

require("source-map-support").install();

merge = require("n-deep-merge");

path = require("path");

fs = require("fs");

isThere = require("is-there");

nocomments = require("strip-json-comments");

base = function(root, relative) {
  if (relative == null) {
    relative = true;
  }
  if (relative && (root != null)) {
    return path.join(process.cwd(), root);
  } else {
    return root || process.cwd();
  }
};

read = function(sources, opts) {
  var e, i, len, objects, root, source, what;
  root = base(opts.root, opts.relative);
  objects = [];
  for (i = 0, len = sources.length; i < len; i++) {
    source = sources[i];
    if (typeof source === "object") {
      objects.push(source);
    } else if (typeof source === "string") {
      what = path.join(root, path.normalize(source));
      try {
        if (isThere(what)) {
          if (/\.js$/.test(what)) {
            objects.push(require(what));
          } else {
            objects.push(JSON.parse(nocomments(fs.readFileSync(what).toString())));
          }
        }
      } catch (_error) {
        e = _error;
        console.error(e);
      }
    }
  }
  return objects;
};

write = function(data, opts) {
  var where;
  where = path.join(base(opts.root, opts.relative), path.normalize(opts.path));
  fs.writeFileSync(where, JSON.stringify(data, null, 2) + "\n", opts.options);
  return data;
};

module.exports = function(sources, opts) {
  var base1, base2, data, objects, ref;
  if (sources == null) {
    sources = [];
  }
  if (opts == null) {
    opts = {};
  }
  data = {};
  if (sources.length > 0) {
    objects = read(sources, opts);
    if (objects.length === 1) {
      data = objects[0];
    } else {
      if (opts.merge == null) {
        opts.merge = true;
      }
      if (opts.merge) {
        objects.unshift({});
        data = merge.apply(null, objects);
      } else {
        data = objects;
      }
    }
  }
  if (((ref = opts.write) != null ? ref.path : void 0) != null) {
    if ((base1 = opts.write).root == null) {
      base1.root = opts.root;
    }
    if ((base2 = opts.write).relative == null) {
      base2.relative = opts.relative;
    }
    return write(data, opts.write);
  } else {
    return data;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBOztBQUFBLE9BQUEsQ0FBUSxvQkFBUixDQUE2QixDQUFDLE9BQTlCLENBQUE7O0FBRUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxjQUFSOztBQUNSLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7QUFDUCxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVI7O0FBQ0wsT0FBQSxHQUFVLE9BQUEsQ0FBUSxVQUFSOztBQUNWLFVBQUEsR0FBYSxPQUFBLENBQVEscUJBQVI7O0FBRWIsSUFBQSxHQUFPLFNBQUMsSUFBRCxFQUFPLFFBQVA7O0lBQ0wsV0FBWTs7RUFDWixJQUFHLFFBQUEsSUFBYSxjQUFoQjtXQUNFLElBQUksQ0FBQyxJQUFMLENBQVUsT0FBTyxDQUFDLEdBQVIsQ0FBQSxDQUFWLEVBQXlCLElBQXpCLEVBREY7R0FBQSxNQUFBO1dBR0UsSUFBQSxJQUFRLE9BQU8sQ0FBQyxHQUFSLENBQUEsRUFIVjs7QUFGSzs7QUFPUCxJQUFBLEdBQU8sU0FBQyxPQUFELEVBQVUsSUFBVjtBQUNMLE1BQUE7RUFBQSxJQUFBLEdBQU8sSUFBQSxDQUFLLElBQUksQ0FBQyxJQUFWLEVBQWdCLElBQUksQ0FBQyxRQUFyQjtFQUNQLE9BQUEsR0FBVTtBQUNWLE9BQUEseUNBQUE7O0lBQ0UsSUFBRyxPQUFPLE1BQVAsS0FBaUIsUUFBcEI7TUFDRSxPQUFPLENBQUMsSUFBUixDQUFhLE1BQWIsRUFERjtLQUFBLE1BRUssSUFBRyxPQUFPLE1BQVAsS0FBaUIsUUFBcEI7TUFDSCxJQUFBLEdBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWLEVBQWdCLElBQUksQ0FBQyxTQUFMLENBQWUsTUFBZixDQUFoQjtBQUNQO1FBQ0UsSUFBRyxPQUFBLENBQVEsSUFBUixDQUFIO1VBQ0UsSUFBRyxPQUFPLENBQUMsSUFBUixDQUFhLElBQWIsQ0FBSDtZQUNFLE9BQU8sQ0FBQyxJQUFSLENBQWEsT0FBQSxDQUFRLElBQVIsQ0FBYixFQURGO1dBQUEsTUFBQTtZQUdFLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxVQUFBLENBQVcsRUFBRSxDQUFDLFlBQUgsQ0FBZ0IsSUFBaEIsQ0FBcUIsQ0FBQyxRQUF0QixDQUFBLENBQVgsQ0FBWCxDQUFiLEVBSEY7V0FERjtTQURGO09BQUEsY0FBQTtRQU1NO1FBQ0osT0FBTyxDQUFDLEtBQVIsQ0FBYyxDQUFkLEVBUEY7T0FGRzs7QUFIUDtTQWFBO0FBaEJLOztBQWtCUCxLQUFBLEdBQVEsU0FBQyxJQUFELEVBQU8sSUFBUDtBQUNOLE1BQUE7RUFBQSxLQUFBLEdBQVEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFBLENBQUssSUFBSSxDQUFDLElBQVYsRUFBZ0IsSUFBSSxDQUFDLFFBQXJCLENBQVYsRUFBMEMsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFJLENBQUMsSUFBcEIsQ0FBMUM7RUFDUixFQUFFLENBQUMsYUFBSCxDQUFpQixLQUFqQixFQUF3QixJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsRUFBcUIsSUFBckIsRUFBMkIsQ0FBM0IsQ0FBQSxHQUFnQyxJQUF4RCxFQUE4RCxJQUFJLENBQUMsT0FBbkU7U0FDQTtBQUhNOztBQU1SLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFNBQUMsT0FBRCxFQUFlLElBQWY7QUFDZixNQUFBOztJQURnQixVQUFVOzs7SUFBSSxPQUFPOztFQUNyQyxJQUFBLEdBQU87RUFFUCxJQUFHLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLENBQXBCO0lBQ0UsT0FBQSxHQUFVLElBQUEsQ0FBSyxPQUFMLEVBQWMsSUFBZDtJQUNWLElBQUcsT0FBTyxDQUFDLE1BQVIsS0FBa0IsQ0FBckI7TUFDRSxJQUFBLEdBQU8sT0FBUSxDQUFBLENBQUEsRUFEakI7S0FBQSxNQUFBOztRQUdFLElBQUksQ0FBQyxRQUFTOztNQUNkLElBQUcsSUFBSSxDQUFDLEtBQVI7UUFFRSxPQUFPLENBQUMsT0FBUixDQUFnQixFQUFoQjtRQUNBLElBQUEsR0FBTyxLQUFLLENBQUMsS0FBTixDQUFZLElBQVosRUFBa0IsT0FBbEIsRUFIVDtPQUFBLE1BQUE7UUFLRSxJQUFBLEdBQU8sUUFMVDtPQUpGO0tBRkY7O0VBYUEsSUFBRyx3REFBSDs7V0FDWSxDQUFDLE9BQVEsSUFBSSxDQUFDOzs7V0FDZCxDQUFDLFdBQVksSUFBSSxDQUFDOztXQUM1QixLQUFBLENBQU0sSUFBTixFQUFZLElBQUksQ0FBQyxLQUFqQixFQUhGO0dBQUEsTUFBQTtXQUtFLEtBTEY7O0FBaEJlIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcInNvdXJjZS1tYXAtc3VwcG9ydFwiKS5pbnN0YWxsKClcblxubWVyZ2UgPSByZXF1aXJlKFwibi1kZWVwLW1lcmdlXCIpXG5wYXRoID0gcmVxdWlyZShcInBhdGhcIilcbmZzID0gcmVxdWlyZShcImZzXCIpXG5pc1RoZXJlID0gcmVxdWlyZShcImlzLXRoZXJlXCIpXG5ub2NvbW1lbnRzID0gcmVxdWlyZShcInN0cmlwLWpzb24tY29tbWVudHNcIilcblxuYmFzZSA9IChyb290LCByZWxhdGl2ZSkgLT5cbiAgcmVsYXRpdmUgPz0gdHJ1ZVxuICBpZiByZWxhdGl2ZSBhbmQgcm9vdD9cbiAgICBwYXRoLmpvaW4gcHJvY2Vzcy5jd2QoKSwgcm9vdFxuICBlbHNlXG4gICAgcm9vdCB8fCBwcm9jZXNzLmN3ZCgpXG5cbnJlYWQgPSAoc291cmNlcywgb3B0cykgLT5cbiAgcm9vdCA9IGJhc2Ugb3B0cy5yb290LCBvcHRzLnJlbGF0aXZlXG4gIG9iamVjdHMgPSBbXVxuICBmb3Igc291cmNlIGluIHNvdXJjZXNcbiAgICBpZiB0eXBlb2Ygc291cmNlIGlzIFwib2JqZWN0XCJcbiAgICAgIG9iamVjdHMucHVzaCBzb3VyY2VcbiAgICBlbHNlIGlmIHR5cGVvZiBzb3VyY2UgaXMgXCJzdHJpbmdcIlxuICAgICAgd2hhdCA9IHBhdGguam9pbihyb290LCBwYXRoLm5vcm1hbGl6ZShzb3VyY2UpKVxuICAgICAgdHJ5XG4gICAgICAgIGlmIGlzVGhlcmUgd2hhdFxuICAgICAgICAgIGlmIC9cXC5qcyQvLnRlc3Qod2hhdClcbiAgICAgICAgICAgIG9iamVjdHMucHVzaCByZXF1aXJlKHdoYXQpXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgb2JqZWN0cy5wdXNoIEpTT04ucGFyc2Uobm9jb21tZW50cyhmcy5yZWFkRmlsZVN5bmMod2hhdCkudG9TdHJpbmcoKSkpXG4gICAgICBjYXRjaCBlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IgZVxuICBvYmplY3RzXG5cbndyaXRlID0gKGRhdGEsIG9wdHMpIC0+XG4gIHdoZXJlID0gcGF0aC5qb2luKGJhc2Uob3B0cy5yb290LCBvcHRzLnJlbGF0aXZlKSwgcGF0aC5ub3JtYWxpemUob3B0cy5wYXRoKSlcbiAgZnMud3JpdGVGaWxlU3luYyB3aGVyZSwgSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMikgKyBcIlxcblwiLCBvcHRzLm9wdGlvbnNcbiAgZGF0YVxuXG5cbm1vZHVsZS5leHBvcnRzID0gKHNvdXJjZXMgPSBbXSwgb3B0cyA9IHt9KSAtPlxuICBkYXRhID0ge31cblxuICBpZiBzb3VyY2VzLmxlbmd0aCA+IDBcbiAgICBvYmplY3RzID0gcmVhZCBzb3VyY2VzLCBvcHRzXG4gICAgaWYgb2JqZWN0cy5sZW5ndGggaXMgMVxuICAgICAgZGF0YSA9IG9iamVjdHNbMF1cbiAgICBlbHNlXG4gICAgICBvcHRzLm1lcmdlID89IHRydWVcbiAgICAgIGlmIG9wdHMubWVyZ2VcbiAgICAgICAgIyBtZXJnZSBtdXRhdGVzLCBqcyBjb2RlIGlzIGZ1bGwgb2YgbXV0YXRpb25zIC8gc2lkZSBlZmZlY3RzXG4gICAgICAgIG9iamVjdHMudW5zaGlmdCB7fSAjIG11dGF0aW9uIGJ1Z3MgcHJldmVudGlvbiAtIG1lcmdlIGl0IGFsbCBpbnRvIHt9XG4gICAgICAgIGRhdGEgPSBtZXJnZS5hcHBseSBudWxsLCBvYmplY3RzXG4gICAgICBlbHNlXG4gICAgICAgIGRhdGEgPSBvYmplY3RzXG5cbiAgaWYgb3B0cy53cml0ZT8ucGF0aD9cbiAgICBvcHRzLndyaXRlLnJvb3QgPz0gb3B0cy5yb290XG4gICAgb3B0cy53cml0ZS5yZWxhdGl2ZSA/PSBvcHRzLnJlbGF0aXZlXG4gICAgd3JpdGUgZGF0YSwgb3B0cy53cml0ZVxuICBlbHNlXG4gICAgZGF0YVxuIl19